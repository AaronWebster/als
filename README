Autocovariance Least-Squares (ALS) Package
 
Version 4.0, Copyright (C) 2010

Fernando V. Lima, Murali R. Rajamani, James B. Rawlings and John W. Eaton.

ALS is a free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3, or (at your option) any
later version.

ALS is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the text file
COPYING for more details.

Availability
------------

The latest released version of ALS is always available via
anonymous ftp from ftp.octave.org in the directory /pub/als.

Installation
------------

To compile ALS, you will need a recent version of GNU Octave. 
You will also need the Sundials toolbox (version 2.4) to compile the 
linear time-varying ALS (LTV-ALS) module. The linear ALS module is 
also compatible with recent versions of Matlab (tested under version 
7.6, R2008a). 

Bugs
----

Questions, comments, bug reports, and contributions should be sent to
the bug-als@bevo.che.wisc.edu mailing list.

Documentation
-------------

The linear ALS technique is implemented using the
"als_sdp_mrQ.m" function. Files "simulate_data8.m" and "motivating
example.m" are examples of ALS implementation for simple
systems. Specifically, please see the last few lines of
"simulate_data8.m" for a sample implementation of the ALS method. The
diagonal ALS technique, to estimate only the diagonal elements of the
covariance matrices, is implemented using "als_diag.m", and
"simulate_data8_diag.m" is an example of its implementation. 
The linear time-varying ALS technique for nonlinear and time-varying 
models is implemented using the "ltv_als.m" function and file "case1_als.m" 
provides an example of its implementation. The rest of the functions 
are supporting functions that are not directly called. Documentation 
for each function is also available by typing "help function_name" 
in the octave command window.

Brief Explanation of ALS Algorithm as Implemented in the Codes
--------------------------------------------------------------
The first function called is als_sdp_mrQ.  In this code:
A) The autocovariances are calculated and put into a vector
B) The A matrix is calculated for the least-squares problem,
and symmetry constraints are applied
C) When applicable, the optimal weighting is estimated
D) The rank condition is checked to determine if the solution
is unique
E) Then it loops through and solves the ALS problem for each
penalty on tr(Q).  The function sdp_mrQ is called to solve
the optimization problem

In sdp_mrQ:
1) The symmetry constraints are undone since the optimization
is in terms of the matrix diag(Q,R) rather than the vector
2) Parameters for the optimization (max step size and iterations,
etc) are chosen
3) The function loops over the penalty on the log barrier term.
This penalty decreases as the loop progresses.  For each value
of the penalty:
a) The Newton direction is calculated
b) The optimal step size is calculated using the golden section 
method (in the function golden_section_Q_mrQ)
c) The new value of diag(Q,R) is calculated
d) The stopping criterion is calculated
These steps are repeated until the stopping criterion is reached
or the maximum number of iterations is allowed.  At the start of
the optimization, if the maximum number of iterations is reached
than the penalty on the log barrier term is increased.  
Otherwise, this penalty is decreased.
The loop over the penalty continues until the log barrier 
penalty has been sufficiently decreased (so that it is 
negligible).

 
